
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  00000ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define CLR_BIT(Var,BitNo)		    Var &= ~(1<<BitNo)
#define TOGGLE_BIT(Var,BitNo)		Var ^= (1<<BitNo)

int main(void)
{
	CLR_BIT(DDRD,2);
  6c:	8a 98       	cbi	0x11, 2	; 17
	
	SET_BIT(DDRD,5);
  6e:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(DDRD,6);
  70:	8e 9a       	sbi	0x11, 6	; 17
	SET_BIT(DDRD,7);
  72:	8f 9a       	sbi	0x11, 7	; 17
	
    while (1) 
    {
		if (PIND & (0b00000010) != 0)
		{
			TOGGLE_BIT(PORTD,5);
  74:	20 e2       	ldi	r18, 0x20	; 32
			TOGGLE_BIT(PORTD,6);
  76:	90 e4       	ldi	r25, 0x40	; 64
	SET_BIT(DDRD,6);
	SET_BIT(DDRD,7);
	
    while (1) 
    {
		if (PIND & (0b00000010) != 0)
  78:	80 9b       	sbis	0x10, 0	; 16
  7a:	fe cf       	rjmp	.-4      	; 0x78 <main+0xc>
		{
			TOGGLE_BIT(PORTD,5);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	82 27       	eor	r24, r18
  80:	82 bb       	out	0x12, r24	; 18
			TOGGLE_BIT(PORTD,6);
  82:	82 b3       	in	r24, 0x12	; 18
  84:	89 27       	eor	r24, r25
  86:	82 bb       	out	0x12, r24	; 18
			TOGGLE_BIT(PORTD,7);
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	80 58       	subi	r24, 0x80	; 128
  8c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	3f ef       	ldi	r19, 0xFF	; 255
  90:	42 e5       	ldi	r20, 0x52	; 82
  92:	87 e0       	ldi	r24, 0x07	; 7
  94:	31 50       	subi	r19, 0x01	; 1
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	eb cf       	rjmp	.-42     	; 0x78 <main+0xc>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
